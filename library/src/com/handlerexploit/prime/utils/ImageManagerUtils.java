/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.prime.utils;

import static com.handlerexploit.prime.utils.ApacheUtils.IOUtils.closeQuietly;
import static com.handlerexploit.prime.utils.ApacheUtils.IOUtils.copy;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.os.Environment;

import com.handlerexploit.common.utils.DiskLruCache;
import com.handlerexploit.common.utils.DiskLruCache.Editor;
import com.handlerexploit.common.utils.DiskLruCache.Snapshot;
import com.handlerexploit.common.utils.LruCache;
import com.handlerexploit.prime.Configuration;
import com.handlerexploit.prime.utils.ApacheUtils.DigestUtils;
import com.handlerexploit.prime.utils.ImageManager.ExtendedRequest;
import com.handlerexploit.prime.utils.ImageManager.Request;

class ImageManagerUtils {

    public static Bitmap decodeByteArray(byte[] byteArray, int height, int width, ExtendedRequest request) {
        try {
            Bitmap bitmap;
            BitmapFactory.Options bitmapFactoryOptions = getBitmapFactoryOptions();

            if (height > 0 && width > 0) {
                bitmapFactoryOptions.inJustDecodeBounds = true;
                BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length, bitmapFactoryOptions);

                int heightRatio = (int) Math.ceil(bitmapFactoryOptions.outHeight / (float) height);
                int widthRatio = (int) Math.ceil(bitmapFactoryOptions.outWidth / (float) width);

                if (heightRatio > 1 || widthRatio > 1) {
                    if (heightRatio > widthRatio) {
                        bitmapFactoryOptions.inSampleSize = heightRatio;
                    } else {
                        bitmapFactoryOptions.inSampleSize = widthRatio;
                    }
                }
                bitmapFactoryOptions.inJustDecodeBounds = false;
            }

            bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length, bitmapFactoryOptions);

            if (request != null) {
                bitmap = request.onPreProcess(bitmap);
            }
            return bitmap;
        } catch (Throwable t) {
            printStackTrace(t);
        }
        return null;
    }

    public static byte[] copyURLToByteArray(String source) {
        InputStream inputStream = null;
        ByteArrayOutputStream byteArrayOutputStream = null;
        try {
            inputStream = new URL(source).openConnection().getInputStream();
            byteArrayOutputStream = new ByteArrayOutputStream();

            copy(inputStream, byteArrayOutputStream);
            return byteArrayOutputStream.toByteArray();
        } catch (MalformedURLException e) {
            printStackTrace(e);
        } catch (IOException e) {
            printStackTrace(e);
        } finally {
            closeQuietly(inputStream);
            closeQuietly(byteArrayOutputStream);
        }
        return null;
    }

    public static void copyBitmapToDiskLruCache(String key, Bitmap bitmap, DiskLruCache diskLruCache) {
        Editor editor = null;
        OutputStream outputStream = null;
        try {
            /*
             * We block here because Editor.edit will return null if another
             * edit is in progress
             */
            while (editor == null) {
                editor = diskLruCache.edit(key);
            }

            outputStream = editor.newOutputStream(0);
            bitmap.compress(CompressFormat.PNG, 0, outputStream);
        } catch (IOException e) {
            printStackTrace(e);
        } finally {
            closeQuietly(outputStream);
            if (editor != null) {
                try {
                    editor.commit();
                } catch (IOException e) {
                    printStackTrace(e);
                }
            }
        }
    }

    public static Bitmap decodeFromSnapshot(Snapshot snapshot) {
        InputStream inputStream = null;
        try {
            inputStream = snapshot.getInputStream(0);
            return BitmapFactory.decodeStream(inputStream, null, getBitmapFactoryOptions());
        } catch (Throwable t) {
            printStackTrace(t);
        } finally {
            closeQuietly(inputStream);
            closeQuietly(snapshot);
        }
        return null;
    }

    public static boolean verifySourceOverTime(String source, Request request) {
        if (source != null && request != null) {
            try {
                Thread.sleep(300);
            } catch (InterruptedException e) {
                printStackTrace(e);
            } finally {
                if (source.equals(request.getSource())) {
                    return true;
                }
            }
        }
        return false;
    }

    public static String getKey(String source) {
        if (source == null) {
            return null;
        } else {
            return DigestUtils.sha256Hex(source);
        }
    }

    public static Options getBitmapFactoryOptions() {
        Options options = new Options();
        options.inPurgeable = true;
        options.inInputShareable = true;
        return options;
    }

    public static File getImagesDirectory(Context context) {
        File directory;
        switch (Configuration.DOWNLOAD_LOCATION) {
        case EXTERNAL:
            if (Environment.getExternalStorageDirectory() != null && Environment.getExternalStorageDirectory().canWrite()) {
                directory = new File(Environment.getExternalStorageDirectory().getPath() + "/Android/data/" + context.getApplicationContext().getPackageName() + "/cache");
                directory.mkdirs();
            } else {
                directory = context.getCacheDir();
            }
            break;
        case INTERNAL:
        default:
            directory = new File(Environment.getDataDirectory().getAbsolutePath() + "/data/" + context.getPackageName() + "/cache");
            break;
        }

        directory = new File(directory.getAbsolutePath(), "/images/");
        return directory;
    }

    public static void printStackTrace(Throwable t) {
        if (Configuration.DEBUGGING) {
            t.printStackTrace();
        }
    }

    public static ExecutorService newConfiguredThreadPool() {
        int corePoolSize = 0;
        int maximumPoolSize = Configuration.ASYNC_THREAD_COUNT;
        long keepAliveTime = 60L;
        TimeUnit unit = TimeUnit.SECONDS;
        BlockingQueue<Runnable> workQueue = new SynchronousQueue<Runnable>(true);
        RejectedExecutionHandler handler = new ThreadPoolExecutor.CallerRunsPolicy();

        return new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);
    }

    public static LruCache<String, Bitmap> newConfiguredLruCache() {
        return new LruCache<String, Bitmap>(Configuration.MEM_CACHE_SIZE_KB * 1024) {

            @Override
            public int sizeOf(String key, Bitmap value) {
                return value.getRowBytes() * value.getHeight();
            }
        };
    }
}