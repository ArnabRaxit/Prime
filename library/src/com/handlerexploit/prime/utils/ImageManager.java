/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.prime.utils;

import static com.handlerexploit.prime.utils.ImageManagerUtils.copyBitmapToDiskLruCache;
import static com.handlerexploit.prime.utils.ImageManagerUtils.copyURLToByteArray;
import static com.handlerexploit.prime.utils.ImageManagerUtils.decodeByteArray;
import static com.handlerexploit.prime.utils.ImageManagerUtils.decodeFromSnapshot;
import static com.handlerexploit.prime.utils.ImageManagerUtils.getImagesDirectory;
import static com.handlerexploit.prime.utils.ImageManagerUtils.getKey;
import static com.handlerexploit.prime.utils.ImageManagerUtils.newConfiguredLruCache;
import static com.handlerexploit.prime.utils.ImageManagerUtils.newConfiguredThreadPool;
import static com.handlerexploit.prime.utils.ImageManagerUtils.printStackTrace;
import static com.handlerexploit.prime.utils.ImageManagerUtils.verifySourceOverTime;

import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.content.Context;
import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Looper;

import com.handlerexploit.prime.Configuration;
import com.handlerexploit.prime.utils.DiskLruCache.Snapshot;

/**
 * This class is responsible for downloading and caching all {@link Bitmap}
 * images. We use a two tier caching mechanism to cache the images both on disk
 * and in memory. Using the {@link Configuration} class you can configure the
 * max byte size for both of these caches.
 */
public class ImageManager {
    
    static final boolean DEBUGGING = Configuration.isDebugging();
    
    private static ImageManager sInstance;
    
    private Handler mHandler = new Handler();
    
    private DiskLruCache mDiskLruCache;
    
    private LruCache<String, Bitmap> mLruCache = newConfiguredLruCache();
    
    private ExecutorService mNetworkExecutorService = newConfiguredThreadPool();
    
    private ExecutorService mDiskExecutorService = Executors.newCachedThreadPool();

    private ImageManager(Context context) {
        try {
            mDiskLruCache = DiskLruCache.open(getImagesDirectory(context), 1, 1, Configuration.getDiskCacheSizeInBytes());
        } catch (IOException e) {
            printStackTrace(e);
            throw new RuntimeException(e);
        }
    }
    
    public static synchronized ImageManager getInstance(Context context) {
        if (sInstance == null) {
            sInstance = new ImageManager(context);
        }
        return sInstance;
    }
    
    /**
     * Return the appropriate {@link Bitmap} associated with the provided
     * {@link String}. This is a synchronous call, if you need to asynchronously
     * retrieve an image use {@link ImageManager#get(Request)}.
     * 
     * @param source
     *            The URL of a remote image
     */
    public Bitmap get(final String source) {
        String key = getKey(source);
        
        Bitmap bitmap = getBitmapFromCache(key);
        
        if (bitmap == null) {
            bitmap = getBitmapFromDisk(key);
        }
        
        if (bitmap == null) {
            bitmap = getBitmapFromNetwork(key, source, null);
        }
        
        return bitmap;
    }
    
    /**
     * Return the appropriate {@link Bitmap} associated with the provided
     * {@link Request} synchronously or asynchronously depending on the state of
     * the internal cache state. <br>
     * <br>
     * <b>This must only be executed on the main UI Thread.</b>
     */
    public void get(final Request request) {
        get(new ExtendedRequest() {
            
            @Override
            public void onImageReceived(String source, Bitmap bitmap) {
                request.onImageReceived(source, bitmap);
            }

            @Override
            public String getSource() {
                return request.getSource();
            }

            @Override
            public Bitmap onPreProcess(Bitmap raw) {
                return raw;
            }
        });
    }

    private void get(final ExtendedRequest request) {
        final String source = request != null ? request.getSource() : null;
        if (source == null) return;

        if (!Looper.getMainLooper().equals(Looper.myLooper())) {
            throw new RuntimeException("This must only be executed on the main UI Thread!");
        }
        
        final String key = getKey(source);

        Bitmap bitmap = getBitmapFromCache(key);
        if (bitmap != null) {
            request.onImageReceived(source, bitmap);
        } else {
            mDiskExecutorService.execute(new Runnable() {
                
                @Override
                public void run() {
                    if (verifySourceOverTime(source, request)) {
                        final Bitmap bitmap = getBitmapFromDisk(key);
                        if (bitmap != null) {
                            mHandler.post(new Runnable() {
                                
                                @Override
                                public void run() {
                                    request.onImageReceived(source, bitmap);
                                }
                            });
                        } else {
                            mNetworkExecutorService.execute(new Runnable() {
                                
                                @Override
                                public void run() {
                                    final Bitmap bitmap = getBitmapFromNetwork(key, source, request);
                                    mHandler.post(new Runnable() {
                                        
                                        @Override
                                        public void run() {
                                            request.onImageReceived(source, bitmap);
                                        }
                                    });
                                }
                            });
                        };
                    }
                }
            });
        }
    }
    
    private Bitmap getBitmapFromCache(String key) {
        return mLruCache.get(key);
    }
    
    private Bitmap getBitmapFromDisk(String key) {
        Bitmap bitmap = null;
        Snapshot snapshot = null;
        try {
            snapshot = mDiskLruCache.get(key);
        } catch (IOException e) {
            printStackTrace(e);
        } finally {
            if (snapshot != null) {
                bitmap = decodeFromSnapshot(snapshot);
                if (bitmap != null) {
                    mLruCache.put(key, bitmap);
                }
            }
        }
        return bitmap;
    }

    private Bitmap getBitmapFromNetwork(String key, String source, ExtendedRequest listener) {
        byte[] byteArray = copyURLToByteArray(source);
        if (byteArray != null) {
            Bitmap bitmap = decodeByteArray(byteArray, listener);
            if (bitmap != null) {
                copyBitmapToDiskLruCache(key, bitmap, mDiskLruCache);
                mLruCache.put(key, bitmap);
                return bitmap;
            }
        }
        return null;
    }
    
    static interface Traceable {
        
        public String getSource();
    }
    
    public static interface Request extends Traceable {
        
        public void onImageReceived(String source, Bitmap bitmap);
    }

    static interface ExtendedRequest extends Request {
        
        public Bitmap onPreProcess(Bitmap raw);
    }
}