/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.prime;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class Configuration {

    private static final Properties sProperties = loadProperties();

    public static final boolean DEBUGGING = toGeneric(sProperties.get("debug"), false);
    public static final int MEM_CACHE_SIZE_KB = toGeneric(sProperties.get("cache.memSize"), 4096);
    public static final int DISK_CACHE_SIZE_KB = toGeneric(sProperties.get("cache.diskSize"), 8192);
    public static final int ASYNC_THREAD_COUNT = toGeneric(sProperties.get("async.numThreads"), Integer.MAX_VALUE);
    public static final Location DOWNLOAD_LOCATION = toGeneric(sProperties.get("cache.diskLocation"), Location.INTERNAL);

    private static Properties loadProperties() {
        Properties properties = new Properties();
        try {
            InputStream configInputStream = Configuration.class.getClassLoader().getResourceAsStream("assets/prime.properties");
            if (configInputStream != null) {
                properties.load(configInputStream);
            }
        } catch (IOException ignore) {}
        return properties;
    }

    @SuppressWarnings("unchecked")
    private static <T> T toGeneric(Object object, Object defValue) {
        if (object != null) {
            try {
                if (defValue instanceof Boolean) {
                    return (T) Boolean.valueOf(object.toString());
                } else if (defValue instanceof Integer) {
                    return (T) ((Integer) Integer.parseInt(object.toString()));
                } else if (defValue instanceof Location) {
                    return (T) Location.valueOf(String.valueOf(object).toUpperCase());
                } else {
                    throw new RuntimeException();
                }
            } catch (NumberFormatException ignore) {} catch (IllegalArgumentException ignore) {} catch (Throwable e) {
                throw new RuntimeException(e);
            }
        }
        return (T) defValue;
    }

    public static enum Location {
        INTERNAL, EXTERNAL
    }
}