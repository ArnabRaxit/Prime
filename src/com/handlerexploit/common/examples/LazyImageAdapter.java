/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.common.examples;

import com.handlerexploit.common.utils.ImageManager;
import com.handlerexploit.common.utils.ImageManager.ImageRequestCallback;

import android.content.Context;
import android.graphics.Bitmap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

class LazyImageAdapter extends ArrayAdapter<String> {
    
    private LayoutInflater mLayoutInflater;
    private ImageManager mImageManager;

    public LazyImageAdapter(Context context) {
        super(context, 0);
        mLayoutInflater = LayoutInflater.from(context);
        mImageManager = ImageManager.getInstance(context);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        
        ViewHolder holder;
        if (convertView == null) {
            convertView = mLayoutInflater.inflate(android.R.layout.activity_list_item, null);

            holder = new ViewHolder();
            holder.text = (TextView) convertView.findViewById(android.R.id.text1);
            holder.icon = (ImageView) convertView.findViewById(android.R.id.icon);

            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        
        String imageURL = getItem(position);

        holder.text.setText(imageURL);
        holder.currentImageURL = imageURL;
        mImageManager.get(holder);

        return convertView;
    }

    private static class ViewHolder implements ImageRequestCallback {
        
        TextView text;
        ImageView icon;
        String currentImageURL;
        
        @Override
        public void onImageReceived(String source, Bitmap bitmap) {
            if (currentImageURL.equals(source) && bitmap != null) {
                icon.setImageBitmap(bitmap);
            }
        }
        
        @Override
        public String getSource() {
            return currentImageURL;
        }
    }
}