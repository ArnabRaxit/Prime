/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.common.examples;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.handlerexploit.internal.apache.IOUtils;

import android.app.ListActivity;
import android.os.AsyncTask;
import android.os.AsyncTask.Status;
import android.os.Bundle;

class PanoramioActivity extends ListActivity {
    
    private AsyncTask<Void, Void, List<Image>> mAsyncTask;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mAsyncTask = new ParseTask().execute();
    }
    
    @Override
    public void onDestroy() {
        if (mAsyncTask != null && mAsyncTask.getStatus() != Status.FINISHED) {
            mAsyncTask.cancel(false);
        }
        super.onDestroy();
    }
    
    private class ParseTask extends AsyncTask<Void, Void, List<Image>> {
        
        private static final String THUMBNAIL_URL = "http://www.panoramio.com/map/get_panoramas.php?order=popularity&set=public&from=0&to=1000&size=thumbnail";

        @Override
        protected List<Image> doInBackground(Void... arg0) {
            List<Image> images = new ArrayList<Image>();
            
            try {
                String raw = IOUtils.toString(new URL(THUMBNAIL_URL).openStream());
                JSONObject jsonObject = new JSONObject(raw);
                JSONArray jsonArray = jsonObject.getJSONArray("photos");

                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject obj = jsonArray.getJSONObject(i);
                    
                    Image image = new Image();
                    image.title = obj.getString("photo_title");
                    image.imageURL = obj.getString("photo_file_url");
                    
                    images.add(image);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            } finally {
                
            }
            
            return images;
        }
        
        @Override
        public void onPostExecute(List<Image> results) {
            LazyImageAdapter adapter = new LazyImageAdapter(getBaseContext());
            for (Image image : results) {
                adapter.add(image);
            }
            setListAdapter(adapter);
        }
    }
}