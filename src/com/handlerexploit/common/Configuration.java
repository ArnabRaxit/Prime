package com.handlerexploit.common;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class Configuration {
    
    private static int sFileExpirationInMilliseconds = 86400000;
    private static int sMemoryCacheSizeInKilobytes = 4096;
    private static int sAsynchronousNetworkThreadCount = Integer.MAX_VALUE;
    private static Location sImageDownloadLocation = Location.INTERNAL;
    
    static {
        Properties properties = new Properties();
        try {
            InputStream configInputStream = Configuration.class.getClassLoader().getResourceAsStream("/config.properties");
            if (configInputStream != null) {
                properties.load(configInputStream);
                
                Integer fileExpirationInMilliseconds = toInteger(properties.get("fileExpirationInMilliseconds"));
                if (fileExpirationInMilliseconds > -1) {
                    sFileExpirationInMilliseconds = fileExpirationInMilliseconds;
                }
                
                Integer memoryCacheSizeInKilobytes = toInteger(properties.get("memoryCacheSizeInKilobytes"));
                if (memoryCacheSizeInKilobytes > -1) {
                    sMemoryCacheSizeInKilobytes = memoryCacheSizeInKilobytes;
                }
                
                Integer asynchronousNetworkThreadCount = toInteger(properties.get("asynchronousNetworkThreadCount"));
                if (asynchronousNetworkThreadCount > -1) {
                    sAsynchronousNetworkThreadCount = asynchronousNetworkThreadCount;
                }
                
                try {
                    sImageDownloadLocation = Location.valueOf((properties.getProperty("imageDownloadLocation") + "").toUpperCase());
                } catch (IllegalArgumentException ignore) {
                    // Silently ignore
                }
            }
        } catch (IOException ignore) {
            // Silently ignore
        }
    }
    
    private static Integer toInteger(Object object) {
        if (object != null) {
            try {
                return Integer.parseInt(object.toString());
            } catch (NumberFormatException ignore) {
                // Silently ignore
            }
        }
        return -1;
    }
    
    public enum Location {
        INTERNAL,
        EXTERNAL
    }
    
    public static Location getImageDownloadLocation() {
        return sImageDownloadLocation;
    }
    
    public static int getMemoryCacheSizeInBytes() {
        return sMemoryCacheSizeInKilobytes * 1024;
    }
    
    public static int getAsynchronousNetworkThreadCount() {
        return sAsynchronousNetworkThreadCount;
    }
    
    public static int getFileExpirationInMillis() {
        return sFileExpirationInMilliseconds;
    }
}